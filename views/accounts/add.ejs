<%- include('../include/header'); %>

<body class="bg-gray-50 font-sans">

  <%- include('../include/navbar'); %>

  <div class="flex min-h-screen">

    <%- include('../include/sidebar'); %>

    <!-- Main Content -->
    <div class="flex-1 min-h-screen">
      <!-- Desktop Header -->
      <header class="hidden lg:block bg-white shadow-sm px-6 lg:px-10 py-4">
        <div class="flex justify-between items-center">
          <div>
            <h2 class="text-2xl lg:text-3xl font-bold text-gray-800"><%- title %></h2>
            <p class="text-gray-500 mt-1">Financial insights for today</p>
          </div>
          <div class="flex items-center space-x-4">
            <button class="relative p-2 text-gray-600 hover:text-gray-800 transition-colors">
              <i class="fas fa-bell text-xl"></i>
              <span class="absolute top-0 right-0 w-3 h-3 bg-red-500 rounded-full"></span>
            </button>
            <div class="w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full overflow-hidden">
              <img src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face" alt="Profile" class="w-full h-full object-cover" />
            </div>
          </div>
        </div>
      </header>


      <main class="p-4 lg:p-10">

        <!-- Recent Transactions -->
        <div class="bg-white p-4 lg:p-6 rounded-xl shadow-md card-hover">
          <!-- Header -->
          <div class="px-4 pb-3 border-b bg-white flex flex-col md:flex-row md:items-center md:justify-between gap-3">
            <div>
              <h2 class="text-lg font-semibold text-gray-800">Accounts List</h2>
              <p class="text-sm text-gray-500">Overview of all your financial accounts</p>
            </div>

            <button type="button" onclick="openAddAccountModal();" id="addAccountBtn" class="flex items-center gap-2 px-3 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md shadow-sm">
              <i class="fa-solid fa-plus text-sm"></i>
              <span>Add Account</span>
            </button>
          </div>

          <!-- Combined Responsive Table -->
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50 text-xs font-semibold text-gray-500 uppercase tracking-wide">
                <tr>
                  <th class="px-3 lg:px-6 py-3 text-left">Name</th>
                  <th class="px-3 lg:px-6 py-3 text-left">Type</th>
                  <th class="px-3 lg:px-6 py-3 text-left">Balance</th>
                  <th class="px-3 lg:px-6 py-3 text-left hidden sm:table-cell">Note</th>
                  <th class="px-3 lg:px-6 py-3 text-right">Actions</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-100 text-sm text-gray-700">
                <% 
                let totalBalance = 0;
                accounts.forEach(account => { 
                  totalBalance += parseFloat(account.balance);
                  %>
                <tr class="hover:bg-gray-50">
                  <td class="px-3 lg:px-6 py-4 font-medium"><%= account.name %></td>
                  <td class="px-3 lg:px-6 py-4">
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      <%= account.type %>
                    </span>
                  </td>
                  <td class="px-3 lg:px-6 py-4 font-medium text-green-600">₹<%= account.balance %></td>
                  <td class="px-3 lg:px-6 py-4 hidden sm:table-cell text-gray-500">
                    <span class="truncate max-w-xs"><%= account.note || '-' %></span>
                  </td>
                  <td class="px-3 lg:px-6 py-4 text-right">
                    <div class="flex justify-end space-x-2">
                      <button type="button" onclick="openAddAccountModal('<%= account.id %>')" class="text-blue-600 hover:text-blue-800 text-sm">Edit</button>
                      <a href="/accounts/<%= account.id %>/delete" class="text-red-600 hover:text-red-800 text-sm">Delete</a>
                    </div>
                  </td>
                </tr>
                <% }) %>
              </tbody>
              <tfoot>
                <tr>
                  <td colspan="5" class="px-3 lg:px-6 py-4 text-left text-sm font-semibold text-gray-900 bg-gray-50">
                    Total Balance: <span class="font-bold text-green-600 text-lg">₹<%= totalBalance.toFixed(2) %></span>
                  </td>
                </tr>
              </tfoot>
            </table>
          </div>

        </div>
      </main>

    </div>
  </div>

  <!-- Add Account Modal -->
  <div id="addAccountModal" class="fixed inset-0 z-50 hidden items-center justify-center p-2 bg-black/30 backdrop-blur-sm">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-sm transform scale-95 opacity-0 transition-all duration-300 animate-scale-in">

      <!-- Header -->
      <div class="flex items-center justify-between px-4 py-3 border-b border-gray-200">
        <h3 class="text-base font-semibold text-gray-800">New Account</h3>
        <button id="closeModal" class="text-gray-400 hover:text-red-500">
          <i class="fa-solid fa-xmark text-lg"></i>
        </button>
      </div>

      <!-- Form -->
      <form id="addAccountForm" method="POST" action="/accounts" class="px-4 py-5 space-y-4 text-sm">

        <!-- Account Name -->
        <div>
          <label for="accountName" class="block mb-1 text-gray-600">Name</label>
          <input type="text" name="name" id="accountName" placeholder="e.g., SBI Savings" class="w-full px-3 py-2 border rounded-md focus:ring focus:ring-blue-200 outline-none border-gray-300" required>
          <input type="hidden" name="id" id="accountId" />
        </div>

        <!-- Type -->
        <div>
          <label for="accountType" class="block mb-1 text-gray-600">Type</label>
          <select name="type" id="accountType" class="w-full px-3 py-2 border rounded-md focus:ring focus:ring-blue-200 outline-none border-gray-300" required>
            <option value="">Choose</option>
            <option value="Bank">Bank</option>
            <option value="Cash">Cash</option>
            <option value="Wallet">Wallet</option>
            <option value="Investment">Investment</option>
          </select>
        </div>

        <!-- Balance -->
        <div>
          <label for="accountBalance" class="block mb-1 text-gray-600">Balance</label>
          <input type="number" name="balance" id="accountBalance" placeholder="0.00" step="0.01" class="w-full px-3 py-2 border rounded-md focus:ring focus:ring-blue-200 outline-none border-gray-300" required>
        </div>

        <!-- Note -->
        <div>
          <label for="accountNote" class="block mb-1 text-gray-600">Note <span class="text-gray-400">(optional)</span></label>
          <textarea name="note" id="accountNote" rows="2" placeholder="Extra info" class="w-full px-3 py-2 border rounded-md focus:ring focus:ring-blue-200 outline-none border-gray-300"></textarea>
        </div>

        <!-- Buttons -->
        <div class="flex justify-end gap-2 pt-2 text-sm">
          <button type="button" id="cancelBtn" class="px-3 py-1.5 border border-gray-300 rounded-md text-gray-600 hover:bg-gray-100 transition">Cancel</button>
          <button type="submit" class="px-4 py-1.5 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition font-medium">Add</button>
        </div>

      </form>

    </div>
  </div>

  <%- include('../include/footer') %>

  <script>
    const addAccountBtn = document.getElementById("addAccountBtn");
    const addAccountModal = document.getElementById("addAccountModal");
    const closeModal = document.getElementById("closeModal");
    const cancelBtn = document.getElementById("cancelBtn");
    const addAccountForm = document.getElementById("addAccountForm");

    // ✅ Open modal
    async function openAddAccountModal(id = null) {
      console.log("id", id);

      try {

        if (id) {

          const res = await fetch(`/accounts/${id}`);
          const data = await res.json();

          console.log("data", data);

          if (!data || !data.account) {
            alert("Account not found");
            return;
          }

          // Populate the form
          document.getElementById("accountId").value = data.account.id;
          document.getElementById("accountName").value = data.account.name;
          document.getElementById("accountType").value = data.account.type;
          document.getElementById("accountBalance").value = data.account.balance;
          document.getElementById("accountNote").value = data.account.note;

          // Change button text to "Update"
          const submitBtn = addAccountForm.querySelector("button[type='submit']");
          submitBtn.textContent = "Update";

        }

        addAccountModal.classList.remove("hidden");
        addAccountModal.classList.add("flex");
        setTimeout(() => {
          const modalBox = addAccountModal.querySelector(".transform");
          modalBox.classList.remove("scale-95", "opacity-0");
          modalBox.classList.add("scale-100", "opacity-100");
        }, 10);

      } catch (err) {
        console.error("Error loading account:", err);
        alert("Failed to load account data.");
      }

    }


    // ✅ Close modal
    function closeAddAccountModal() {
      const modalBox = addAccountModal.querySelector(".transform");
      modalBox.classList.remove("scale-100", "opacity-100");
      modalBox.classList.add("scale-95", "opacity-0");
      setTimeout(() => {
        addAccountModal.classList.add("hidden");
        addAccountModal.classList.remove("flex");
        addAccountForm.reset();
      }, 300);
    }


    // ✅ Validate and submit the form
    async function handleAddAccountSubmit(e) {
      e.preventDefault();

      const formData = new FormData(addAccountForm);
      const formParams = new URLSearchParams(formData);

      const id = formData.get("id");
      const name = formData.get("name");
      const type = formData.get("type");
      const balance = formData.get("balance");

      if (!name || !type || !balance) {
        alert("Please fill in all required fields");
        return;
      }

      if (parseFloat(balance) < 0) {
        alert("Balance cannot be negative");
        return;
      }

      try {
        const url = id ? `/accounts/${id}` : "/accounts";
        const method = id ? "PUT" : "POST";

        const res = await fetch(url, {
          method,
          body: formParams,
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        });

        const data = await res.json();

        if (data.success) {
          toastr.success(data.message);
          closeAddAccountModal();
          // Optional: refresh page or update table
        } else {
          toastr.error(data.message || "Something went wrong.");
        }
      } catch (err) {
        console.error("Submit failed:", err);
        alert("An error occurred. Please try again.");
      }
    }


    async function fetchAndRenderAccounts() {
      // try {
        const res = await fetch('/accounts/list');
        const data = await res.json();

        console.log("data", data);

        if (!data.success) {
          toastr.error("Failed to load accounts");
          return;
        }

        const accounts = data.accounts;
        const tableBody = document.getElementById("accountTableBody");
        const tableFooter = document.getElementById("accountTableFooter");

        tableBody.innerHTML = ""; // Clear previous rows
        tableFooter.innerHTML = "";

        let total = 0;

        accounts.forEach(account => {
          total += parseFloat(account.balance);

          const row = `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4">${account.name}</td>
            <td class="px-6 py-4">
              <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">${account.type}</span>
            </td>
            <td class="px-6 py-4 font-medium text-green-600">₹${parseFloat(account.balance).toFixed(2)}</td>
            <td class="px-6 py-4">${account.note || ""}</td>
            <td class="px-6 py-4 text-right space-x-2">
              <a href="javascript:void(0)" onclick="editAccount(${account.id})" class="text-blue-600 hover:text-blue-800">Edit</a>
              <a href="/accounts/${account.id}/delete" class="text-red-600 hover:text-red-800">Delete</a>
            </td>
          </tr>
        `;

          tableBody.innerHTML += row;
        });

        tableFooter.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-4 text-left text-sm font-semibold text-gray-900">
            Total Balance:  ₹<span class="font-bold text-green-600 underline">${total.toFixed(2)}</span>
          </td>
        </tr>
      `;
      // } catch (err) {
      //   console.error("Error fetching accounts:", err);
      //   toastr.error("Server error while loading accounts");
      // }
    }


    // ✅ Attach event listeners
    function initAccountModalEvents() {
      closeModal.addEventListener("click", closeAddAccountModal);
      cancelBtn.addEventListener("click", closeAddAccountModal);
      addAccountModal.addEventListener("click", (e) => {
        if (e.target === addAccountModal) {
          closeAddAccountModal();
        }
      });
      addAccountForm.addEventListener("submit", handleAddAccountSubmit);
    }

    // ✅ Initialize once DOM is ready
    document.addEventListener("DOMContentLoaded", initAccountModalEvents);
    document.addEventListener("DOMContentLoaded", fetchAndRenderAccounts);
  </script>

</body>

</html>